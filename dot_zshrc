
###  Start of oh-my-zsh configuration

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"

zstyle ':omz:update' mode auto      # update automatically without asking

# Uncomment the following line to change how often to auto-update (in days).
zstyle ':omz:update' frequency 7

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

plugins=(git docker git terraform zsh-syntax-highlighting zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

### End of oh-my-zsh configuration


# Starship prompt
eval "$(starship init zsh)"

# Key bindings
bindkey -v '^?' backward-delete-char

# Aliases
alias vi="nvim"
alias vim="nvim"
alias cat="bat"
alias rcat="bat -p --pager=Never"
alias ls="lsd"
alias ll="lsd -lag"
alias tree="lsd --tree"
alias k="kubectl"
alias lg="lazygit"
alias zshrc='${EDITOR:-vim} "${ZDOTDIR:-$HOME}"/.zshrc'
alias zbench='for i in {1..10}; do /usr/bin/time zsh -lic exit; done'

alias licensereplace='rg -l --hidden --no-ignore "^// SPDX-License-Identifier:" | xargs perl -i -pe '\''s|^// SPDX-License-Identifier:.*|// SPDX-License-Identifier: LicenseRef-Defense-Unicorns-Commercial|'\'''

alias asso="aws sso login"

# function to set AWS profile, sso login and clear the profile
function aws_profiles() {
  profiles=$(aws --no-cli-pager configure list-profiles 2> /dev/null)
  if [[ -z "$profiles" ]]; then
    echo "No AWS profiles found in '$HOME/.aws/config, check if ~/.aws/config exists and properly configured.'"
    return 1
  else
    echo $profiles
  fi
}

function asp() {
  available_profiles=$(aws_profiles)
  selected_profile=$(echo "$available_profiles" | fzf --height 10 --border --prompt="Select AWS Profile: " --select-1 --query="$1")
  if [[ -z "$selected_profile" ]]; then
    unset AWS_DEFAULT_PROFILE AWS_PROFILE
    echo "No profile selected, AWS profile cleared."
    return
  fi

  echo "$available_profiles" | grep -qw "$selected_profile"
  if [[ $? -ne 0 ]]; then
    echo "Profile '$selected_profile' not configured in '$HOME/.aws/config'.\n"
    echo "Available profiles: \n$available_profiles\n"
    return 1
  else
    echo "Selected profile: $selected_profile"
    export AWS_DEFAULT_PROFILE="$selected_profile" AWS_PROFILE="$selected_profile"
  fi
}


# Editors
export EDITOR='nvim'

# NVM setup
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"

# Go environment
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# Python related settings
export PIPENV_VENV_IN_PROJECT=1
export PIP_REQUIRE_VIRTUALENV=true


# Cargo environment
export PATH=$HOME/.cargo/bin:$PATH
. "$HOME/.cargo/env"

# Additional paths
export PATH=$HOME/bin:/usr/local/bin:$HOME/.local/bin:$HOME/.local/bin/scripts:$PATH

# K9S Config dir 
export K9S_CONFIG_DIR=/Users/jason/.config/k9s

# FZF setup
source <(fzf --zsh)

# Zoxide setup
eval "$(zoxide init zsh)"

# Thefuck setup
eval $(thefuck --alias)

# Copilot cli setup
eval "$(gh copilot alias -- zsh)"

export MARU_AUTH="{\"raw.githubusercontent.com\": \"$(gh auth token)\"}"

# Added by Windsurf
export PATH="/Users/jason/.codeium/windsurf/bin:$PATH"

# Enables certinfo helper from Charles
function certinfo {
  FILE_TYPE=`file -L $1`
  if $(echo "$FILE_TYPE"|grep -q "Java KeyStore")
  then
    echo "Java KeyStore File:"
    keytool -list -v -keystore $1| egrep "(Certificate\[|Owner: |Issuer: )"
  elif openssl req -text -noout -verify -in $1 > /dev/null 2>&1
  then
    echo "Cert Request File:"
    openssl req -text -noout -verify -in $1
  elif openssl rsa -in $1 -check > /dev/null 2>&1
  then
    echo "RSA Private Key File, password once more please:"
    openssl rsa -in $1 -check
  elif openssl pkcs12 -info -in $1 -nodes > /dev/null 2>&1
  then
    echo "PKCS12, .p12 file, password once more please:"
    openssl pkcs12 -info -in $1 -nodes | openssl x509 -noout -subject -issuer
  elif openssl x509 -in $1 -text -noout > /dev/null 2>&1
  then
    echo "X509 Certificates:"
    awk '
    BEGIN {
        cert = "";
        in_cert = 0;
    }

    /-----BEGIN CERTIFICATE-----/ {
        cert = $0;
        in_cert = 1;
        next;
    }

    /-----END CERTIFICATE-----/ {
        cert = cert "\n" $0;

        # Extract certificate info
        cmd = "echo \"" cert "\" | openssl x509 -subject -issuer -noout -dates";
        first_line = 0;
        while ((cmd | getline line) > 0) {
            if (first_line == 0) {
                print line;
                first_line = 1;
            } else {
                print "  " line;
            }
        }
        close(cmd);

        # Extract Subject Alternative Name
        cmd = "echo \"" cert "\" | openssl x509 -text -noout | grep -A1 \"Subject Alternative Name\"";
        while ((cmd | getline line) > 0) {
            print "  " line;
        }
        close(cmd);

        cert = "";
        in_cert = 0;
        next;
    }

    {
        if (in_cert) {
            cert = cert "\n" $0;
        }
    }' "$1"
  elif openssl pkcs7 -text -in $1 > /dev/null 2>&1
  then
    echo "PKCS7, .p7b file; contains a full cert chain, but no keys"
    echo "Top level cert:"
    openssl pkcs7 -print_certs -in $1 | openssl x509 -noout -subject -issuer -dates
    openssl pkcs7 -print_certs -in $1 | openssl x509 -noout -text | grep -A1 "Subject Alternative Name"

    echo "Full chain:"
    openssl pkcs7 -print_certs -in $1 | grep -E '(subject|issuer)'
  else
    echo "Unknown filetype."
  fi
}
